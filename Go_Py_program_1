Sever Development mixed with Go and Python - 1. Go calls Py

1. Go calls Python, then Python uses the stdout to return results to Go
In Go:

import (
    "bytes"
    "fmt"
    "json"
    
    "go.uber.org/zap"
)

type struct ResultFromPy {
  MsgType string `json:"msg_type"`
  Param1  string `json:"param1"`
  Param2  string `json:"param2"` 
}

// Set log
logger, _ := zap.NewProduction()
defer logger.Sync()


// Send msg from Go to Python
var outBuf, errBuf bytes.Buffer
cmdName := python
args := []string{"my_script.py", "input1", "input2"}
cmd := exec.Command(cmdName, args...)
cmd.Stdout = &outBuf
cmd.Stderr = &errBuf
err := cmd.Run()

if err != nil {
  	logger.Error(
		"Error for ",
		zap.String("cmd", cmdName),
		zap.Strings("args", args),
		zap.String("stdout", cmd.Stdout),
		zap.String("stderr", cmd.Stderr),
		zap.Error(err))
}

// Receive msg from Python
resultFromPy := ResultFromPy{}
if err := json.Unmarshal([]byte(strings.TrimSpace(stdO)), &resultFromPy); err != nil {
    if err != nil {
  	logger.Error(
		"Failed to receive results from Pyscript",
		zap.String("cmd", cmdName),
		zap.Strings("args", args),
		zap.String("stdout", cmd.Stdout),
		zap.String("stderr", cmd.Stderr),
		zap.Error(err))
}
fmt.Println(resultFromPy)
}
