1. Folder permission
* The output file should be in the correct path, e.g.
com.apple.security.files.downloads.read-write  :  store the file downloaded from Internet, not for the local writing
com.apple.security.assets.pictures.read-write  :  write the image from the local

2. dylib
* Build Phase : Link binary with lib, then General --> Framework, lib : Embeded and Sign

3. C call Swift
* Swift
Keyword: @_cdecl
e.g.
@_cdecl("updateMainThread")
public func updateMainThread(code: UInt64, info:  UnsafePointer<UInt8>, size: UInt64) {
    let str = String(cString: info)
}

* C
extern "C" void updateMainThread(uint64_t code, uint8_t *info, uint64_t size);


4. Swift call C
* Swift --> brdige -- > Objective-C --> C/C++
e.g. 
Swift  : DadEye().getscreen()

* Bridge : dadeye-Bridging-Header.h
#import "dadeyewrapper.h"

* Objective-C : "dadeyewrapper.h"
#import <Foundation/Foundation.h>
@interface DadEye : NSObject
- (void) getscreen;
@end

* Objective-C : "dadeyecbridge.mm"
#import "dadeyewrapper.h"
#import "main.hpp"
@implementation DadEye
- (void) getscreen {
    DadEyeWrapper().getscreen([[self picpath] cStringUsingEncoding:NSUTF8StringEncoding]);
}
@end

* C/C++ main.hpp

class DadEyeWrapper {
public:
    void getscreen(const char* path);
};

* C/C++ main.cpp
void DadEyeWrapper::getscreen(const char* path) {}







